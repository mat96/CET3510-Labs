// This is the lab for CET 3510

#include <stdio.h>
#include <iostream>

int loop = 5;
	
	
	

int main()
{
	/*An 8-bit one dimensional array declaration and initialization.
	Pointers will be used to store the address of each element of the array
	A 32-bit array md[5] will be used to store each of the pointers
	A 32-bit array madd[5] is used to store the address of each element of the array
	A 8-bit array var[5] is used to store the retrieved value by indirect memory addressing mode*/

	char sc8_arr[5] = { 0x41, 0x42, 0x79, 0x7A, 0x7B }; // setting the array 
	char *scPtr0, *scPtr1, *scPtr2, *scPtr3, *scPtr4;  // creating pointers 
	int md[5], madd[5];//  mad stores the pointers and madd[] is used to store the address 

	char var[4]; // creates an array var
	
	//Initialization for each elemetn in an array sc8_arr[5]
	

	//referenceing values to pointers
	scPtr0 = &sc8_arr[0];
	scPtr1 = &sc8_arr[1];
	scPtr2 = &sc8_arr[2];
	scPtr3 = &sc8_arr[3];
	scPtr4 = &sc8_arr[4];
	
	
	// Display the Hex value, decimal value, and char value for each element of char array

	printf("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n");
	printf("------------ The value of each element  of 8-bit array -----------\n");



	for (int i = 0; i < loop; i++)
	{
		printf("The value of %d in an array is 0x%x (hex), %d(decimal), %c (character)\n", i, sc8_arr[i], sc8_arr[i]);
	}
	std::cout << "\n";

	// Display address in hexadecimal for each element of char array
	printf("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n");
	printf("------------ The address of each element  of 8-bit array -----------\n");

	for (int i = 0; i < loop; i++)
	{
		printf("The memory address of element %d in an array is 0x%X (hexidemial)\n",	
			i, scPtr0 + i);
	}

	std::cout << "\n";

	printf("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n");
	//find the total numbers in byte of array sc8_arr[5]
	//find the number of byte of each element of array
	printf("------ The size information in bytes of an 8-bit array -----------\n");
	printf("The total numbers in bytes of an 8-bit array with 5 elements is %d bytes\n", sizeof(sc8_arr));

	for (int i = 0; i < 4; i++)
	{
		md[i] = sizeof(sc8_arr[i]);
		madd[i] = sizeof(scPtr0 + 1);

		printf("----------------------------------------\n");
		printf("the size of element %d is %d bytes\n", i, madd[i]);

	}


	//Indirect memory addressing by MOV DL, [EAX]

	_asm
	{
		/*move the address of element 0 to EAX
		store the content at the address shown in EAX into DL (indirect addressing)
		move the current content of DL into the variable of var[0]*/

		MOV EAX, scPtr0;
		MOV DL, [EAX];
		MOV var[0], DL;
		
	}

	_asm
	{
		/*move the address of element 0 to EAX
		store the content at the address shown in EAX into DL (indirect addressing)
		move the current content of DL into the variable of var[0]*/

		MOV EAX, scPtr1;
		MOV DL, [EAX];
		MOV var[1], DL;

	}
	_asm
	{
		/*move the address of element 0 to EAX
		store the content at the address shown in EAX into DL (indirect addressing)
		move the current content of DL into the variable of var[0]*/

		MOV EAX, scPtr2;
		MOV DL, [EAX];
		MOV var[2], DL;

	}
	_asm
	{
		/*move the address of element 0 to EAX
		store the content at the address shown in EAX into DL (indirect addressing)
		move the current content of DL into the variable of var[0]*/

		MOV EAX, scPtr3;
		MOV DL, [EAX];
		MOV var[3], DL;

	}


	printf("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n");
	printf("------ The Value of each element of two 8-bit arrays -----------\n");

	for (int i = 0; i < 4; i++)
	{
		printf("The values of index %d of the original array and retrieved array \n", i);
		printf("by indirect addressing mode are: 0x%x(hex) and 0x%x(hex), respectively \n",
			sc8_arr[i], var[i]);
		printf("----------------------------------------\n");

	}
	return 0;
}


